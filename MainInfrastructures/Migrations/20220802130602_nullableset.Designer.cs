// <auto-generated />
using System;
using MainInfrastructures.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MainInfrastructures.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220802130602_nullableset")]
    partial class nullableset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.BasedDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AcceptedOrg")
                        .HasColumnName("accepted_org")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnName("document_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentName")
                        .HasColumnName("document_name")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNo")
                        .HasColumnName("document_no")
                        .HasColumnType("text");

                    b.Property<int>("DocumentType")
                        .HasColumnName("document_type")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("based_documents","organizations");
                });

            modelBuilder.Entity("Domain.Models.ContentManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("content_manager","organizations");
                });

            modelBuilder.Entity("Domain.Models.Deadline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnName("deadline_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OperatorDeadlineDate")
                        .HasColumnName("operator_deadline_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("deadline","ranking");
                });

            modelBuilder.Entity("Domain.Models.EmployeeStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CentralManagementEmployees")
                        .HasColumnName("central_management_employees")
                        .HasColumnType("integer");

                    b.Property<int>("CentralManagementPositions")
                        .HasColumnName("central_management_positions")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentHeadEmployees")
                        .HasColumnName("department_head_employees")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentHeadPositions")
                        .HasColumnName("department_head_positions")
                        .HasColumnType("integer");

                    b.Property<int>("HeadEmployees")
                        .HasColumnName("head_employees")
                        .HasColumnType("integer");

                    b.Property<int>("HeadPositions")
                        .HasColumnName("head_positions")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("OtherEmployees")
                        .HasColumnName("other_employees")
                        .HasColumnType("integer");

                    b.Property<int>("OtherPositions")
                        .HasColumnName("other_positions")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionPersonnelsEmployee")
                        .HasColumnName("production_personnels_employee")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionPersonnelsPosition")
                        .HasColumnName("production_personnels_position")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceStuffEmployee")
                        .HasColumnName("service_stuff_employee")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceStuffPositions")
                        .HasColumnName("service_stuff_positions")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialistsEmployee")
                        .HasColumnName("specialists_employee")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialistsPosition")
                        .HasColumnName("specialists_position")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinationEmployees")
                        .HasColumnName("subordination_employees")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinationPositions")
                        .HasColumnName("subordination_positions")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalStuffEmployee")
                        .HasColumnName("technical_stuff_employee")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalStuffPositions")
                        .HasColumnName("technical_stuff_positions")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialManagementEmployees")
                        .HasColumnName("territorial_management_employees")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialManagementPositions")
                        .HasColumnName("territorial_management_positions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("employee_statistics","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.DelaysOnProjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProjectApplyingDate")
                        .HasColumnName("project_applying_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProjectApplyingMechanism")
                        .HasColumnName("project_applying_mechanism")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProjectDocumentDate")
                        .HasColumnName("project_document_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProjectDocumentNumber")
                        .HasColumnName("project_document_number")
                        .HasColumnType("text");

                    b.Property<string>("ProjectFinancingSource")
                        .HasColumnName("project_financing_source")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnName("project_name")
                        .HasColumnType("text");

                    b.Property<long>("ProjectPrice")
                        .HasColumnName("project_price")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectStatus")
                        .HasColumnName("project_status")
                        .HasColumnType("integer");

                    b.Property<long>("ProvidedFund")
                        .HasColumnName("provided_fund")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("delays_on_projects","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgFinance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("OrgDigitalizationFinancePercent")
                        .HasColumnName("org_digitalization_finance_percent")
                        .HasColumnType("double precision");

                    b.Property<double>("OrgFinanceAmount")
                        .HasColumnName("org_finance_amount")
                        .HasColumnType("double precision");

                    b.Property<double>("OrgItFinancePercent")
                        .HasColumnName("org_it_finance_percent")
                        .HasColumnType("double precision");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_finance","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgFutureYearsStrategies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnName("approval_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentName")
                        .HasColumnName("document_name")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNumber")
                        .HasColumnName("document_number")
                        .HasColumnType("text");

                    b.Property<string>("DocumentPath")
                        .HasColumnName("document_path")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_future_years_strategies","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgInformationSystems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AutomatedServices")
                        .HasColumnName("automated_services")
                        .HasColumnType("text");

                    b.Property<bool>("AvailabilityAutomationOfService")
                        .HasColumnName("availability_automation_of_service")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CommissioningDate")
                        .HasColumnName("commissioning_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpertOpinionDate")
                        .HasColumnName("expert_opinion_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExpertOpinionNumber")
                        .HasColumnName("expert_opinion_number")
                        .HasColumnType("text");

                    b.Property<bool>("HasIntegrationWithEgovernment")
                        .HasColumnName("has_integration_with_egovernment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IntegratedCentralDatabase")
                        .HasColumnName("integrated_central_database")
                        .HasColumnType("boolean");

                    b.Property<bool>("IntegratedComplexesOfSystems")
                        .HasColumnName("integrated_complexes_of_systems")
                        .HasColumnType("boolean");

                    b.Property<bool>("IntegratedPaymentSystem")
                        .HasColumnName("integrated_payment_system")
                        .HasColumnType("boolean");

                    b.Property<bool>("IntegratedRegisterClassifiers")
                        .HasColumnName("integrated_register_classifiers")
                        .HasColumnType("boolean");

                    b.Property<bool>("IntegrationInterdepartmentalPlatform")
                        .HasColumnName("integration_interdepartmental_platform")
                        .HasColumnType("boolean");

                    b.Property<string>("ListOfServices")
                        .HasColumnName("list_of_services")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("OtherClassifiers")
                        .HasColumnName("other_clasifiers")
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystemName")
                        .HasColumnName("payment_system_name")
                        .HasColumnType("text");

                    b.Property<string>("SystemAppointment")
                        .HasColumnName("system_appointment")
                        .HasColumnType("text");

                    b.Property<string>("SystemCondition")
                        .HasColumnName("system_condition")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnName("system_name")
                        .HasColumnType("text");

                    b.Property<string>("SystemReestrNumber")
                        .HasColumnName("system_reestr_number")
                        .HasColumnType("text");

                    b.Property<string>("TransmittingInformationsFirst")
                        .HasColumnName("transmitting_informations_first")
                        .HasColumnType("text");

                    b.Property<string>("TransmittingInformationsFourth")
                        .HasColumnName("transmitting_informations_fourth")
                        .HasColumnType("text");

                    b.Property<string>("TransmittingInformationsSecond")
                        .HasColumnName("transmitting_informations_second")
                        .HasColumnType("text");

                    b.Property<string>("TransmittingInformationsThird")
                        .HasColumnName("transmitting_informations_third")
                        .HasColumnType("text");

                    b.Property<string>("UsedClassifiers")
                        .HasColumnName("used_clasifiers")
                        .HasColumnType("text");

                    b.Property<int>("UsersCount")
                        .HasColumnName("users_count")
                        .HasColumnType("integer");

                    b.Property<bool>("UsesClassifiers")
                        .HasColumnName("uses_classifiers")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_information_systems","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgProcesses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnName("filepath")
                        .HasColumnType("text");

                    b.Property<int>("ItProcessNumber")
                        .HasColumnName("it_process_number")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessNumber")
                        .HasColumnName("process_number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_processes","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrganizationEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EventDate")
                        .HasColumnName("event_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventName")
                        .HasColumnName("event_name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_events","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrganizationIctSpecialForces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AmountOfFunds")
                        .HasColumnName("amount_of_funds")
                        .HasColumnType("double precision");

                    b.Property<double>("AmountOfSpentFund")
                        .HasColumnName("amount_of_spent_fund")
                        .HasColumnType("double precision");

                    b.Property<int>("CentralofficeEmployees")
                        .HasColumnName("central_office_employees")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterizingDocument")
                        .HasColumnName("characterizing_document")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<bool>("EmployeesResumesSentMinistry")
                        .HasColumnName("employees_resumes_sent_ministry")
                        .HasColumnType("boolean");

                    b.Property<string>("EmployeesSertificates")
                        .HasColumnName("employees_sertificates")
                        .HasColumnType("text");

                    b.Property<int>("EmployeesSum")
                        .HasColumnName("employees_sum")
                        .HasColumnType("integer");

                    b.Property<bool>("FinanceProvisionMaterial")
                        .HasColumnName("finance_provision_material")
                        .HasColumnType("boolean");

                    b.Property<string>("FormOfSpecialForces")
                        .HasColumnName("form_of_special_forces")
                        .HasColumnType("text");

                    b.Property<string>("FullNameDirector")
                        .HasColumnName("full_name_head")
                        .HasColumnType("text");

                    b.Property<double>("FundForKeepingForces")
                        .HasColumnName("fund_for_keeping_forces")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasCharacterizingDocument")
                        .HasColumnName("has_characterizing_document")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMinistryAgreedCharacterizingDocument")
                        .HasColumnName("has_ministry_agreed_characterizing_document")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSpecialForces")
                        .HasColumnName("has_special_forces")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasWorkPlanOfSpecialForces")
                        .HasColumnName("has_work_plan_of_special_forces")
                        .HasColumnType("boolean");

                    b.Property<string>("HeadPosition")
                        .HasColumnName("head_position")
                        .HasColumnType("text");

                    b.Property<int>("InformationSecurityEmployees")
                        .HasColumnName("information_security_employees")
                        .HasColumnType("integer");

                    b.Property<int>("InformationSystemDatabaseEmployees")
                        .HasColumnName("information_system_database_employees")
                        .HasColumnType("integer");

                    b.Property<double>("LastYearAmountOfFunds")
                        .HasColumnName("last_year_amount_of_funds")
                        .HasColumnType("double precision");

                    b.Property<string>("MinistryAgreedCharacterizingDocument")
                        .HasColumnName("ministry_agreed_characterizing_document")
                        .HasColumnType("text");

                    b.Property<bool>("MinistryAgreedHead")
                        .HasColumnName("ministry_agreed_head")
                        .HasColumnType("boolean");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobile_phone")
                        .HasColumnType("text");

                    b.Property<double>("NextYearFundForKeepingForces")
                        .HasColumnName("next_year_fund_for_keeping_forces")
                        .HasColumnType("double precision");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizationalStructureFile")
                        .HasColumnName("organizational_structure_file")
                        .HasColumnType("text");

                    b.Property<int>("OutsourcingEmployees")
                        .HasColumnName("outsourcing_employees")
                        .HasColumnType("integer");

                    b.Property<bool>("OutsourcingHasCertificates")
                        .HasColumnName("outsourcing_has_certificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("OutsourcingHasWorkPlan")
                        .HasColumnName("outsourcing_has_work_plan")
                        .HasColumnType("boolean");

                    b.Property<double>("OutsourcingSpentFund")
                        .HasColumnName("outsourcing_spent_fund")
                        .HasColumnType("double precision");

                    b.Property<bool>("QuarterlyReportOutsourcing")
                        .HasColumnName("quarterly_report_outsourcing")
                        .HasColumnType("boolean");

                    b.Property<int>("RegionalEmployees")
                        .HasColumnName("regional_employees")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialForcesName")
                        .HasColumnName("special_forces_name")
                        .HasColumnType("text");

                    b.Property<string>("SpecialistsStuffingDocument")
                        .HasColumnName("specialists_stuffing_document")
                        .HasColumnType("text");

                    b.Property<int>("SubordinateEmployees")
                        .HasColumnName("subordinate_employees")
                        .HasColumnType("integer");

                    b.Property<string>("WorkPhone")
                        .HasColumnName("work_phone")
                        .HasColumnType("text");

                    b.Property<string>("WorkPlanOfSpecialForces")
                        .HasColumnName("work_plan_of_special_forces")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_ict_special_forces","organizations");
                });

            modelBuilder.Entity("Domain.Models.GRankTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<int>("ElementId")
                        .HasColumnName("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsException")
                        .HasColumnName("is_exception")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<double>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("double precision");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubFieldId")
                        .HasColumnName("sub_field_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SphereId");

                    b.ToTable("g_rank_table","ranking");
                });

            modelBuilder.Entity("Domain.Models.GSphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("g_sphere","ranking");
                });

            modelBuilder.Entity("Domain.Models.Organization.SiteFailsTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DeadlineId")
                        .HasColumnName("deadline_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FailedTime")
                        .HasColumnName("failed_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("site_fails_table","organizations");
                });

            modelBuilder.Entity("Domain.Models.Organization.WebSiteAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DeadlineId")
                        .HasColumnName("deadline_id")
                        .HasColumnType("integer");

                    b.Property<int>("FailedPing")
                        .HasColumnName("failed_ping")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("SuccessfulPing")
                        .HasColumnName("successful_ping")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("WebSiteAvailability","organizations");
                });

            modelBuilder.Entity("Domain.Models.OrganizationApps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AndroidAppLink")
                        .HasColumnName("android_app_link")
                        .HasColumnType("text");

                    b.Property<bool>("HasAndroidApp")
                        .HasColumnName("has_android_app")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasIosApp")
                        .HasColumnName("has_ios_app")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOtherApps")
                        .HasColumnName("has_other_apps")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasResponsiveWebsite")
                        .HasColumnName("has_responsive_website")
                        .HasColumnType("boolean");

                    b.Property<string>("IosAppLink")
                        .HasColumnName("ios_app_link")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("OtherAppLink")
                        .HasColumnName("other_app_link")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_apps","organizations");
                });

            modelBuilder.Entity("Domain.Models.OrganizationDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnName("document_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentName")
                        .HasColumnName("document_name")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNo")
                        .HasColumnName("document_no")
                        .HasColumnType("text");

                    b.Property<int>("DocumentType")
                        .HasColumnName("document_type")
                        .HasColumnType("integer");

                    b.Property<string>("MainPurpose")
                        .HasColumnName("main_purpose")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_documents","organizations");
                });

            modelBuilder.Entity("Domain.Models.Organizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressDistrict")
                        .HasColumnName("address_district")
                        .HasColumnType("text");

                    b.Property<string>("AddressHomeNo")
                        .HasColumnName("address_home_no")
                        .HasColumnType("text");

                    b.Property<string>("AddressProvince")
                        .HasColumnName("address_province")
                        .HasColumnType("text");

                    b.Property<string>("AddressStreet")
                        .HasColumnName("address_street")
                        .HasColumnType("text");

                    b.Property<string>("Department")
                        .HasColumnName("department")
                        .HasColumnType("text");

                    b.Property<string>("DirectorFirstName")
                        .HasColumnName("director_first_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorLastName")
                        .HasColumnName("director_last_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorMail")
                        .HasColumnName("director_mail")
                        .HasColumnType("text");

                    b.Property<string>("DirectorMidName")
                        .HasColumnName("director_mid_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorPosition")
                        .HasColumnName("director_position")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsIct")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMonitoring")
                        .HasColumnType("boolean");

                    b.Property<int>("OrgCategory")
                        .HasColumnName("org_category")
                        .HasColumnType("integer");

                    b.Property<string>("OrgMail")
                        .HasColumnName("org_mail")
                        .HasColumnType("text");

                    b.Property<int>("OrgType")
                        .HasColumnName("org_type")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<string>("PostIndex")
                        .HasColumnName("post_index")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("text");

                    b.Property<int>("UserServiceId")
                        .HasColumnName("user_service_id")
                        .HasColumnType("integer");

                    b.Property<string>("WebSite")
                        .HasColumnName("web_site")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("organization","organizations");
                });

            modelBuilder.Entity("Domain.Models.RankTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsException")
                        .HasColumnName("is_exception")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<double>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("double precision");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SphereId");

                    b.ToTable("rank_table","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SphereId");

                    b.ToTable("field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.GField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SphereId");

                    b.ToTable("g_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.GSubField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("g_sub_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.IsFilledTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<int>("ElementId")
                        .HasColumnName("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFilled")
                        .HasColumnName("is_filled")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SphereId");

                    b.ToTable("is_filled_table","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.SubField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Category")
                        .HasColumnName("category")
                        .HasColumnType("integer");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("sub_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.XField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SphereId");

                    b.ToTable("x_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.XSubField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("x_sub_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("regions","organizations");
                });

            modelBuilder.Entity("Domain.Models.ReplacerOrgHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<string>("MidName")
                        .HasColumnName("mid_name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("replacer_org_head","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.HelplineInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DeadlineId")
                        .HasColumnName("deadline_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("HelplinePhoneRatingOption")
                        .HasColumnName("helpline_phone_rating_option")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplinePhoneWorkStatus")
                        .HasColumnName("helpline_phone_work_status")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplineStatisticsArchiving")
                        .HasColumnName("helpline_statistics_archiving")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplineStatisticsByRank")
                        .HasColumnName("helpline_statistics_by_rank")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplineStatisticsByTime")
                        .HasColumnName("helpline_statistics_by_time")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplineStatisticsIntime")
                        .HasColumnName("helpline_statistics_intime")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("RegulationShowsClientRights")
                        .HasColumnName("regulation_shows_client_rights")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsPhone")
                        .HasColumnName("regulation_shows_phone")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsReplayDeadline")
                        .HasColumnName("regulation_shows_replay_deadline")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsRequestProcedure")
                        .HasColumnName("regulation_shows_request_procedure")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsServices")
                        .HasColumnName("regulation_shows_services")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsTimetable")
                        .HasColumnName("regulation_shows_timetable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationVerified")
                        .HasColumnName("regulation_verified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("WebsiteHasHelplineStatistics")
                        .HasColumnName("website_has_helpline_statistics")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DeadlineId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("helpline_info","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrgDataFiller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Contacts")
                        .HasColumnName("contacts")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_data_filler","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrgHelpline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("HelplineNumber")
                        .HasColumnName("helpline_number")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_helpline","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrganizationSocialParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DeadlineId")
                        .HasColumnName("deadline_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("LinksToOtherSocials")
                        .HasColumnName("links_to_other_socials")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgEmail")
                        .HasColumnName("org_email")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgFullName")
                        .HasColumnName("org_full_name")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgLegalAddress")
                        .HasColumnName("org_legal_address")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgLegalSite")
                        .HasColumnName("org_legal_site")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgPhone")
                        .HasColumnName("org_phone")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("Pool")
                        .HasColumnName("pool")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SyncronizedPosts")
                        .HasColumnName("syncronized_posts")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DeadlineId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_social_parameters","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrganizationSocials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MessengerLink")
                        .HasColumnName("messenger_link")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("Verified")
                        .HasColumnName("verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_socials","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.SiteRequirementsSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementStatus")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("ScreenLink")
                        .HasColumnName("ScreenLink")
                        .HasColumnType("text");

                    b.Property<string>("SiteLink")
                        .HasColumnName("site_link")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("site_requirements_sample","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.WebSiteRequirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("RequirementStatus")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("ScreenLink")
                        .HasColumnName("ScreenLink")
                        .HasColumnType("text");

                    b.Property<string>("SiteLink")
                        .HasColumnName("site_link")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("website_requirements","organizations");
                });

            modelBuilder.Entity("Domain.Models.SeventhSection.OrganizationComputers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllComputers")
                        .HasColumnName("all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("CentralAllComputers")
                        .HasColumnName("central_all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedCorporateNetwork")
                        .HasColumnName("central_connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedEijro")
                        .HasColumnName("central_connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedExat")
                        .HasColumnName("central_connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedLocalSet")
                        .HasColumnName("central_connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedNetwork")
                        .HasColumnName("central_connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedProjectGov")
                        .HasColumnName("central_connected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedProjectMyWork")
                        .HasColumnName("central_connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("CentralWorkingComputers")
                        .HasColumnName("central_working_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedCorporateNetwork")
                        .HasColumnName("connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedEijro")
                        .HasColumnName("connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedExat")
                        .HasColumnName("connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedLocalSet")
                        .HasColumnName("connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedNetwork")
                        .HasColumnName("connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedProjectGov")
                        .HasColumnName("connected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedProjectMyWork")
                        .HasColumnName("connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateAllComputers")
                        .HasColumnName("subordinate_all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedCorporateNetwork")
                        .HasColumnName("subordinate_connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedEijro")
                        .HasColumnName("subordinate_connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedExat")
                        .HasColumnName("subordinate_connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedLocalSet")
                        .HasColumnName("subordinate_connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedNetwork")
                        .HasColumnName("subordinate_connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedProjectGov")
                        .HasColumnName("subordinateconnected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedProjectMyWork")
                        .HasColumnName("subordinate_connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateWorkingComputers")
                        .HasColumnName("subordinate_working_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialAllComputers")
                        .HasColumnName("territorial_all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedCorporateNetwork")
                        .HasColumnName("territorial_connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedEijro")
                        .HasColumnName("territorial_connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedExat")
                        .HasColumnName("territorial_connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedLocalSet")
                        .HasColumnName("territorial_connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedNetwork")
                        .HasColumnName("territorial_connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedProjectGov")
                        .HasColumnName("territorial_connected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedProjectMyWork")
                        .HasColumnName("territorial_connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialWorkingComputers")
                        .HasColumnName("territorial_working_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingComputers")
                        .HasColumnName("working_cmputers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_computers","organizations");
                });

            modelBuilder.Entity("Domain.Models.SeventhSection.OrganizationServers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NumberOfServers")
                        .HasColumnName("number_of_servers")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("ServerAutomaticTasks")
                        .HasColumnName("server_automatic_tasks")
                        .HasColumnType("text");

                    b.Property<string>("ServerBrand")
                        .HasColumnName("server_brand")
                        .HasColumnType("text");

                    b.Property<string>("ServerConfig")
                        .HasColumnName("server_config")
                        .HasColumnType("text");

                    b.Property<string>("ServerType")
                        .HasColumnName("server_type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_servers","organizations");
                });

            modelBuilder.Entity("Domain.Models.Sphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("sphere","ranking");
                });

            modelBuilder.Entity("Domain.Models.SubOrgStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CentralManagements")
                        .HasColumnName("central_managements")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Others")
                        .HasColumnName("others")
                        .HasColumnType("integer");

                    b.Property<int>("Subordinations")
                        .HasColumnName("subordinations")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialManagements")
                        .HasColumnName("territorial_managements")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("sub_org_statistics","organizations");
                });

            modelBuilder.Entity("Domain.Models.SubOrganizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Contacts")
                        .HasColumnName("contacts")
                        .HasColumnType("text");

                    b.Property<string>("DirectorFirstName")
                        .HasColumnName("director_first_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorLastName")
                        .HasColumnName("director_last_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorMidName")
                        .HasColumnName("director_mid_name")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("OfficialSite")
                        .HasColumnName("official_site")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerType")
                        .HasColumnName("owner_type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("sub_organization","organizations");
                });

            modelBuilder.Entity("Domain.Models.ThirdSection.OrganizationPublicServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsPaid")
                        .HasColumnName("is_paid")
                        .HasColumnType("boolean");

                    b.Property<bool>("MechanizmForTrackingProgress")
                        .HasColumnName("mechanizm_for_tracking_progress")
                        .HasColumnType("boolean");

                    b.Property<string>("MobileApp")
                        .HasColumnName("mobile_app")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("OtherResources")
                        .HasColumnName("other_resources")
                        .HasColumnType("text");

                    b.Property<string>("PortalLink")
                        .HasColumnName("portal_link")
                        .HasColumnType("text");

                    b.Property<string>("ReglamentPath")
                        .HasColumnName("reglament_path")
                        .HasColumnType("text");

                    b.Property<bool>("ReglamentUpdated")
                        .HasColumnName("reglament_updated")
                        .HasColumnType("boolean");

                    b.Property<string>("RenderingForm")
                        .HasColumnName("rendering_form")
                        .HasColumnType("text");

                    b.Property<string>("ServiceLink")
                        .HasColumnName("service_link")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnName("service_name")
                        .HasColumnType("text");

                    b.Property<string>("ServiceOtherResult")
                        .HasColumnName("service_other_result")
                        .HasColumnType("text");

                    b.Property<string>("ServiceResult")
                        .HasColumnName("service_result")
                        .HasColumnType("text");

                    b.Property<string>("TrackingProgressBy")
                        .HasColumnName("tracking_progress_by")
                        .HasColumnType("text");

                    b.Property<string>("UserTypes")
                        .HasColumnName("user_types")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_public_services","organizations");
                });

            modelBuilder.Entity("Domain.Models.XRankTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<int>("ElementId")
                        .HasColumnName("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsException")
                        .HasColumnName("is_exception")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<double>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("double precision");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubFieldId")
                        .HasColumnName("sub_field_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SphereId");

                    b.ToTable("x_rank_table","ranking");
                });

            modelBuilder.Entity("Domain.Models.XSphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("x_sphere","ranking");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.Property<int>("NormativeLegalDocumentId")
                        .HasColumnName("normative_legal_document_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PerformanceYearEnd")
                        .HasColumnName("performance_year_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PerformanceYearStart")
                        .HasColumnName("performance_year_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormativeLegalDocumentId");

                    b.ToTable("application","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateComment")
                        .HasColumnName("date_comment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StageId")
                        .HasColumnName("stages_id")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .HasColumnName("user_role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("comment","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Cooworkers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("cooworkers","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.FileProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FileSaveDate")
                        .HasColumnName("file_save_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("file_project","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.FileStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FileSaveDate")
                        .HasColumnName("file_save_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.Property<int>("StageId")
                        .HasColumnName("stages_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("file_stage","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Financier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("financier","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.NormativeLegalDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnName("approved_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.Property<int>("NormativType")
                        .HasColumnName("document_type")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("normative_legal_document","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Performencer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("performencer","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("integer");

                    b.Property<string>("CostEffective")
                        .HasColumnName("cost_effective")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<double>("Payouts")
                        .HasColumnName("payouts")
                        .HasColumnType("double precision");

                    b.Property<string>("Problem")
                        .HasColumnName("problem")
                        .HasColumnType("text");

                    b.Property<string>("ProjectPurpose")
                        .HasColumnName("project_purpose")
                        .HasColumnType("text");

                    b.Property<double>("RaisedFunds")
                        .HasColumnName("raised_funds")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<double>("VolumeForecastFunds")
                        .HasColumnName("volume_forecast_funds")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("project","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.ProjectComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateComment")
                        .HasColumnName("date_comment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .HasColumnName("user_role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_comment","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.ProjectFinanciers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FinancierId")
                        .HasColumnName("financier_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FinancierId");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_financiers","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("integer");

                    b.Property<string>("CreationUserName")
                        .HasColumnName("creation_username")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int>("StageStatus")
                        .HasColumnName("stage_status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("stage","module_regions");
                });

            modelBuilder.Entity("Domain.Models.BasedDocuments", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany("BasedDocuments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ContentManager", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.EmployeeStatistics", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.DelaysOnProjects", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgFinance", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgFutureYearsStrategies", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgInformationSystems", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgProcesses", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrganizationEvents", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrganizationIctSpecialForces", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.GRankTable", b =>
                {
                    b.HasOne("Domain.Models.Ranking.GField", "GField")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.GSphere", "GSphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Organization.SiteFailsTable", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Organization.WebSiteAvailability", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.OrganizationApps", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.OrganizationDocuments", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.RankTable", b =>
                {
                    b.HasOne("Domain.Models.Ranking.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany("OrgRanks")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.Field", b =>
                {
                    b.HasOne("Domain.Models.Sphere", "Sphere")
                        .WithMany("Fields")
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.GField", b =>
                {
                    b.HasOne("Domain.Models.GSphere", "GSphere")
                        .WithMany("GFields")
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.GSubField", b =>
                {
                    b.HasOne("Domain.Models.Ranking.GField", "GField")
                        .WithMany("GSubFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.IsFilledTable", b =>
                {
                    b.HasOne("Domain.Models.Ranking.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Sphere", "Sphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.SubField", b =>
                {
                    b.HasOne("Domain.Models.Ranking.Field", "Field")
                        .WithMany("SubFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.XField", b =>
                {
                    b.HasOne("Domain.Models.XSphere", "XSphere")
                        .WithMany("XFields")
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.XSubField", b =>
                {
                    b.HasOne("Domain.Models.Ranking.XField", "XField")
                        .WithMany("XSubFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ReplacerOrgHead", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.HelplineInfo", b =>
                {
                    b.HasOne("Domain.Models.Deadline", "Deadline")
                        .WithMany()
                        .HasForeignKey("DeadlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrgDataFiller", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrgHelpline", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrganizationSocialParameters", b =>
                {
                    b.HasOne("Domain.Models.Deadline", "Deadline")
                        .WithMany()
                        .HasForeignKey("DeadlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrganizationSocials", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.WebSiteRequirements", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SeventhSection.OrganizationComputers", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SeventhSection.OrganizationServers", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SubOrgStatistics", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SubOrganizations", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany("SubOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ThirdSection.OrganizationPublicServices", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.XRankTable", b =>
                {
                    b.HasOne("Domain.Models.Ranking.XField", "XField")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.XSphere", "XSphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Application", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.NormativeLegalDocument", "NormativeLegalDocument")
                        .WithMany("Applications")
                        .HasForeignKey("NormativeLegalDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Comment", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Stage", "Stage")
                        .WithMany("Comments")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Cooworkers", b =>
                {
                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MonitoringModels.Models.Project", "Project")
                        .WithMany("Cooworkers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.FileProject", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Project", "Project")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.FileStage", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Stage", "Stage")
                        .WithMany("Files")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Project", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Application", "Applications")
                        .WithMany("Projects")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.ProjectComment", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Project", "Project")
                        .WithMany("ProjectComments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.ProjectFinanciers", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Financier", "Financier")
                        .WithMany()
                        .HasForeignKey("FinancierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MonitoringModels.Models.Project", "Project")
                        .WithMany("ProjectFinanciers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Stage", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Project", "Projects")
                        .WithMany("Stages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
