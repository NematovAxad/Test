// <auto-generated />
using System;
using MainInfrastructures.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MainInfrastructures.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230804122300_photopathadded")]
    partial class photopathadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.ContentManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("content_manager","organizations");
                });

            modelBuilder.Entity("Domain.Models.Deadline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Dashboard")
                        .HasColumnName("dashboard")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FifthSectionDeadlineDate")
                        .HasColumnName("fifth_section_deadline_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OperatorDeadlineDate")
                        .HasColumnName("operator_deadline_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("PingService")
                        .HasColumnName("ping_service")
                        .HasColumnType("boolean");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SecondSectionDeadlineDate")
                        .HasColumnName("second_section_deadline_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SixthSectionDeadlineDate")
                        .HasColumnName("sixth_section_deadline_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ThirdSectionDeadlineDate")
                        .HasColumnName("third_section_deadline_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("deadline","ranking");
                });

            modelBuilder.Entity("Domain.Models.EighthSection.OrganizationBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AllFact1")
                        .HasColumnName("all_fact1")
                        .HasColumnType("double precision");

                    b.Property<double>("AllFact2")
                        .HasColumnName("all_fact2")
                        .HasColumnType("double precision");

                    b.Property<double>("AllFact3")
                        .HasColumnName("all_fact3")
                        .HasColumnType("double precision");

                    b.Property<double>("AllFact4")
                        .HasColumnName("all_fact4")
                        .HasColumnType("double precision");

                    b.Property<double>("AllPlan1")
                        .HasColumnName("all_plan1")
                        .HasColumnType("double precision");

                    b.Property<double>("AllPlan2")
                        .HasColumnName("all_plan2")
                        .HasColumnType("double precision");

                    b.Property<double>("AllPlan3")
                        .HasColumnName("all_plan3")
                        .HasColumnType("double precision");

                    b.Property<double>("AllPlan4")
                        .HasColumnName("all_plan4")
                        .HasColumnType("double precision");

                    b.Property<double>("ForeignBudgetFact1")
                        .HasColumnName("foreign_budget_fact1")
                        .HasColumnType("double precision");

                    b.Property<double>("ForeignBudgetFact2")
                        .HasColumnName("foreign_budget_fact2")
                        .HasColumnType("double precision");

                    b.Property<double>("ForeignBudgetFact3")
                        .HasColumnName("foreign_budget_fact3")
                        .HasColumnType("double precision");

                    b.Property<double>("ForeignBudgetFact4")
                        .HasColumnName("foreign_budget_fact4")
                        .HasColumnType("double precision");

                    b.Property<double>("ForeignBudgetPlan1")
                        .HasColumnName("foreign_budget_plan1")
                        .HasColumnType("double precision");

                    b.Property<double>("ForeignBudgetPlan2")
                        .HasColumnName("foreign_budget_plan2")
                        .HasColumnType("double precision");

                    b.Property<double>("ForeignBudgetPlan3")
                        .HasColumnName("foreign_budget_plan3")
                        .HasColumnType("double precision");

                    b.Property<double>("ForeignBudgetPlan4")
                        .HasColumnName("foreign_budget_plan4")
                        .HasColumnType("double precision");

                    b.Property<double>("LocalInvestmentBudgetFact1")
                        .HasColumnName("local_investment_budget_fact1")
                        .HasColumnType("double precision");

                    b.Property<double>("LocalInvestmentBudgetFact2")
                        .HasColumnName("local_investment_budget_fact2")
                        .HasColumnType("double precision");

                    b.Property<double>("LocalInvestmentBudgetFact3")
                        .HasColumnName("local_investment_budget_fact3")
                        .HasColumnType("double precision");

                    b.Property<double>("LocalInvestmentBudgetFact4")
                        .HasColumnName("local_investment_budget_fact4")
                        .HasColumnType("double precision");

                    b.Property<double>("LocalInvestmentBudgetPlan1")
                        .HasColumnName("local_investment_budget_plan1")
                        .HasColumnType("double precision");

                    b.Property<double>("LocalInvestmentBudgetPlan2")
                        .HasColumnName("local_investment_budget_plan2")
                        .HasColumnType("double precision");

                    b.Property<double>("LocalInvestmentBudgetPlan3")
                        .HasColumnName("local_investment_budget_plan3")
                        .HasColumnType("double precision");

                    b.Property<double>("LocalInvestmentBudgetPlan4")
                        .HasColumnName("local_investment_budget_plan4")
                        .HasColumnType("double precision");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<double>("OtherBudgetFact1")
                        .HasColumnName("other_budget_fact1")
                        .HasColumnType("double precision");

                    b.Property<double>("OtherBudgetFact2")
                        .HasColumnName("other_budget_fact2")
                        .HasColumnType("double precision");

                    b.Property<double>("OtherBudgetFact3")
                        .HasColumnName("other_budget_fact3")
                        .HasColumnType("double precision");

                    b.Property<double>("OtherBudgetFact4")
                        .HasColumnName("other_budget_fact4")
                        .HasColumnType("double precision");

                    b.Property<double>("OtherBudgetPlan1")
                        .HasColumnName("other_budget_plan1")
                        .HasColumnType("double precision");

                    b.Property<double>("OtherBudgetPlan2")
                        .HasColumnName("other_budget_plan2")
                        .HasColumnType("double precision");

                    b.Property<double>("OtherBudgetPlan3")
                        .HasColumnName("other_budget_plan3")
                        .HasColumnType("double precision");

                    b.Property<double>("OtherBudgetPlan4")
                        .HasColumnName("other_budget_plan4")
                        .HasColumnType("double precision");

                    b.Property<double>("PersonalBudgetFact1")
                        .HasColumnName("personal_budget_fact1")
                        .HasColumnType("double precision");

                    b.Property<double>("PersonalBudgetFact2")
                        .HasColumnName("personal_budget_fact2")
                        .HasColumnType("double precision");

                    b.Property<double>("PersonalBudgetFact3")
                        .HasColumnName("personal_budget_fact3")
                        .HasColumnType("double precision");

                    b.Property<double>("PersonalBudgetFact4")
                        .HasColumnName("personal_budget_fact4")
                        .HasColumnType("double precision");

                    b.Property<double>("PersonalBudgetPlan1")
                        .HasColumnName("personal_budget_plan1")
                        .HasColumnType("double precision");

                    b.Property<double>("PersonalBudgetPlan2")
                        .HasColumnName("personal_budget_plan2")
                        .HasColumnType("double precision");

                    b.Property<double>("PersonalBudgetPlan3")
                        .HasColumnName("personal_budget_plan3")
                        .HasColumnType("double precision");

                    b.Property<double>("PersonalBudgetPlan4")
                        .HasColumnName("personal_budget_plan4")
                        .HasColumnType("double precision");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_budget","organizations");
                });

            modelBuilder.Entity("Domain.Models.EighthSection.OrganizationFinance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AllFact1")
                        .HasColumnName("all_fact_1")
                        .HasColumnType("double precision");

                    b.Property<double>("AllFact2")
                        .HasColumnName("all_fact_2")
                        .HasColumnType("double precision");

                    b.Property<double>("AllFact3")
                        .HasColumnName("all_fact_3")
                        .HasColumnType("double precision");

                    b.Property<double>("AllFact4")
                        .HasColumnName("all_fact_4")
                        .HasColumnType("double precision");

                    b.Property<double>("AllPlan1")
                        .HasColumnName("all_plan_1")
                        .HasColumnType("double precision");

                    b.Property<double>("AllPlan2")
                        .HasColumnName("all_plan_2")
                        .HasColumnType("double precision");

                    b.Property<double>("AllPlan3")
                        .HasColumnName("all_plan_3")
                        .HasColumnType("double precision");

                    b.Property<double>("AllPlan4")
                        .HasColumnName("all_plan_4")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact11")
                        .HasColumnName("fact_11")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact12")
                        .HasColumnName("fact_12")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact13")
                        .HasColumnName("fact_13")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact14")
                        .HasColumnName("fact_14")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact21")
                        .HasColumnName("fact_21")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact22")
                        .HasColumnName("fact_22")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact23")
                        .HasColumnName("fact_23")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact24")
                        .HasColumnName("fact_24")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact31")
                        .HasColumnName("fact_31")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact32")
                        .HasColumnName("fact_32")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact33")
                        .HasColumnName("fact_33")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact34")
                        .HasColumnName("fact_34")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact41")
                        .HasColumnName("fact_41")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact42")
                        .HasColumnName("fact_42")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact43")
                        .HasColumnName("fact_43")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact44")
                        .HasColumnName("fact_44")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact51")
                        .HasColumnName("fact_51")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact52")
                        .HasColumnName("fact_52")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact53")
                        .HasColumnName("fact_53")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact54")
                        .HasColumnName("fact_54")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact61")
                        .HasColumnName("fact_61")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact62")
                        .HasColumnName("fact_62")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact63")
                        .HasColumnName("fact_63")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact64")
                        .HasColumnName("fact_64")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact71")
                        .HasColumnName("fact_71")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact72")
                        .HasColumnName("fact_72")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact73")
                        .HasColumnName("fact_73")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact74")
                        .HasColumnName("fact_74")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact81")
                        .HasColumnName("fact_81")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact82")
                        .HasColumnName("fact_82")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact83")
                        .HasColumnName("fact_83")
                        .HasColumnType("double precision");

                    b.Property<double>("Fact84")
                        .HasColumnName("fact_84")
                        .HasColumnType("double precision");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<double>("Plan11")
                        .HasColumnName("plan_11")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan12")
                        .HasColumnName("plan_12")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan13")
                        .HasColumnName("plan_13")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan14")
                        .HasColumnName("plan_14")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan21")
                        .HasColumnName("plan_21")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan22")
                        .HasColumnName("plan_22")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan23")
                        .HasColumnName("plan_23")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan24")
                        .HasColumnName("plan_24")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan31")
                        .HasColumnName("plan_31")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan32")
                        .HasColumnName("plan_32")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan33")
                        .HasColumnName("plan_33")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan34")
                        .HasColumnName("plan_34")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan41")
                        .HasColumnName("plan_41")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan42")
                        .HasColumnName("plan_42")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan43")
                        .HasColumnName("plan_43")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan44")
                        .HasColumnName("plan_44")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan51")
                        .HasColumnName("plan_51")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan52")
                        .HasColumnName("plan_52")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan53")
                        .HasColumnName("plan_53")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan54")
                        .HasColumnName("plan_54")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan61")
                        .HasColumnName("plan_61")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan62")
                        .HasColumnName("plan_62")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan63")
                        .HasColumnName("plan_63")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan64")
                        .HasColumnName("plan_64")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan71")
                        .HasColumnName("plan_71")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan72")
                        .HasColumnName("plan_72")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan73")
                        .HasColumnName("plan_73")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan74")
                        .HasColumnName("plan_74")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan81")
                        .HasColumnName("plan_81")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan82")
                        .HasColumnName("plan_82")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan83")
                        .HasColumnName("plan_83")
                        .HasColumnType("double precision");

                    b.Property<double>("Plan84")
                        .HasColumnName("plan_84")
                        .HasColumnType("double precision");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_finance","organizations");
                });

            modelBuilder.Entity("Domain.Models.EighthSection.OrganizationFinanceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("FullYearBudget")
                        .HasColumnName("full_year_budget")
                        .HasColumnType("double precision");

                    b.Property<double>("FullYearDigitalizationBudgetPercent")
                        .HasColumnName("full_year_digitalization_budget_percent")
                        .HasColumnType("double precision");

                    b.Property<double>("FullYearSpentBudgetPercent")
                        .HasColumnName("full_year_spent_budget_percent")
                        .HasColumnType("double precision");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_finance_report","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.DelaysOnProjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProjectApplyingDate")
                        .HasColumnName("project_applying_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProjectApplyingMechanism")
                        .HasColumnName("project_applying_mechanism")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProjectDocumentDate")
                        .HasColumnName("project_document_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProjectDocumentNumber")
                        .HasColumnName("project_document_number")
                        .HasColumnType("text");

                    b.Property<string>("ProjectFinancingSource")
                        .HasColumnName("project_financing_source")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnName("project_name")
                        .HasColumnType("text");

                    b.Property<long>("ProjectPrice")
                        .HasColumnName("project_price")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectStatus")
                        .HasColumnName("project_status")
                        .HasColumnType("integer");

                    b.Property<long>("ProvidedFund")
                        .HasColumnName("provided_fund")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("delays_on_projects","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgFinance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("OrgDigitalizationFinancePercent")
                        .HasColumnName("org_digitalization_finance_percent")
                        .HasColumnType("double precision");

                    b.Property<double>("OrgFinanceAmount")
                        .HasColumnName("org_finance_amount")
                        .HasColumnType("double precision");

                    b.Property<double>("OrgItFinancePercent")
                        .HasColumnName("org_it_finance_percent")
                        .HasColumnType("double precision");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_finance","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgFutureYearsStrategies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnName("approval_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentName")
                        .HasColumnName("document_name")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNumber")
                        .HasColumnName("document_number")
                        .HasColumnType("text");

                    b.Property<string>("DocumentPath")
                        .HasColumnName("document_path")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_future_years_strategies","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgInformationSystems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("ClassifiersUsed")
                        .HasColumnName("classifiers_used")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExpertDecision")
                        .HasColumnName("expert_decision")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<bool>("SybersecurityDecision")
                        .HasColumnName("cybersecurity_decision")
                        .HasColumnType("boolean");

                    b.Property<string>("SystemBasis")
                        .HasColumnName("system_basis")
                        .HasColumnType("text");

                    b.Property<bool>("SystemConnections")
                        .HasColumnName("system_connections")
                        .HasColumnType("boolean");

                    b.Property<string>("SystemFullName")
                        .HasColumnName("system_full_name")
                        .HasColumnType("text");

                    b.Property<string>("SystemId")
                        .HasColumnName("system_id")
                        .HasColumnType("text");

                    b.Property<string>("SystemLink")
                        .HasColumnName("system_link")
                        .HasColumnType("text");

                    b.Property<string>("SystemPurpose")
                        .HasColumnName("system_purpose")
                        .HasColumnType("text");

                    b.Property<string>("SystemShortName")
                        .HasColumnName("system_short_name")
                        .HasColumnType("text");

                    b.Property<int>("SystemStatus")
                        .HasColumnName("system_status")
                        .HasColumnType("integer");

                    b.Property<bool>("SystemUniqueIds")
                        .HasColumnName("system_unique_ids")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_information_systems","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgProcesses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnName("filepath")
                        .HasColumnType("text");

                    b.Property<int>("ItProcessNumber")
                        .HasColumnName("it_process_number")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessNumber")
                        .HasColumnName("process_number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_processes","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrganizationEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EventDate")
                        .HasColumnName("event_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventName")
                        .HasColumnName("event_name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_events","organizations");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.AutomatedFunctions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("FunctionName")
                        .HasColumnName("function_name")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("automated_functions","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.AutomatedServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .HasColumnName("service_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("automated_services","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectAuthorizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AuthorizationType")
                        .HasColumnName("authorization_type")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorizationUri")
                        .HasColumnName("authorization_uri")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("project_authorizations","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectClassifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassificationType")
                        .HasColumnName("classification_type")
                        .HasColumnType("integer");

                    b.Property<string>("ClassificationUri")
                        .HasColumnName("classification_uri")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("project_classifications","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectConnections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConnectionType")
                        .HasColumnName("connection_type")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("PlatformReestrId")
                        .HasColumnName("platform_reestr_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("project_connections","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EfficiencyType")
                        .HasColumnName("efficiency_type")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("OrgComment")
                        .HasColumnName("org_comment")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("project_efficiency","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectIdentities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<int>("IdentitiyType")
                        .HasColumnName("identity_type")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityUrl")
                        .HasColumnName("identity_url")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("project_identities","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectAuthorizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllItems")
                        .HasColumnName("all_items")
                        .HasColumnType("integer");

                    b.Property<int>("ExceptedItems")
                        .HasColumnName("excepted_items")
                        .HasColumnType("integer");

                    b.Property<bool>("Exist")
                        .HasColumnName("exist")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<string>("OrgComment")
                        .HasColumnName("org_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_authorizations","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectAutomatedServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllItems")
                        .HasColumnName("all_items")
                        .HasColumnType("integer");

                    b.Property<int>("ExceptedItems")
                        .HasColumnName("excepted_items")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<bool>("ProjectFunctionsExist")
                        .HasColumnName("project_functions_exist")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProjectServiceExist")
                        .HasColumnName("project_service_exist")
                        .HasColumnType("boolean");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_automated_services","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectClassifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllItems")
                        .HasColumnName("all_items")
                        .HasColumnType("integer");

                    b.Property<int>("ExceptedItems")
                        .HasColumnName("excepted_items")
                        .HasColumnType("integer");

                    b.Property<bool>("Exist")
                        .HasColumnName("exist")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<string>("OrgComment")
                        .HasColumnName("org_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_classifications","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllItems")
                        .HasColumnName("all_items")
                        .HasColumnType("integer");

                    b.Property<int>("ExceptedItems")
                        .HasColumnName("excepted_items")
                        .HasColumnType("integer");

                    b.Property<bool>("Exist")
                        .HasColumnName("exist")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<string>("OrgComment")
                        .HasColumnName("org_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_connection","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectCyberSecurityExpertDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Exist")
                        .HasColumnName("exist")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<bool>("ExpertExcept")
                        .HasColumnName("expert_except")
                        .HasColumnType("boolean");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("OrgComment")
                        .HasColumnName("org_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_cyber_security_expert_decsion","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllItems")
                        .HasColumnName("all_items")
                        .HasColumnType("integer");

                    b.Property<int>("ExceptedItems")
                        .HasColumnName("excepted_items")
                        .HasColumnType("integer");

                    b.Property<bool>("Exist")
                        .HasColumnName("exist")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<string>("OrgComment")
                        .HasColumnName("org_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_efficiency","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Exception")
                        .HasColumnName("exist")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpertPinfl")
                        .HasColumnName("expert_pinfl")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_exception","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectExpertDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Exist")
                        .HasColumnName("exist")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<bool>("ExpertExcept")
                        .HasColumnName("expert_except")
                        .HasColumnType("boolean");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("OrgComment")
                        .HasColumnName("org_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_expert_decsion","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectIdentities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllItems")
                        .HasColumnName("all_items")
                        .HasColumnType("integer");

                    b.Property<int>("ExceptedItems")
                        .HasColumnName("excepted_items")
                        .HasColumnType("integer");

                    b.Property<bool>("Exist")
                        .HasColumnName("exist")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<string>("OrgComment")
                        .HasColumnName("org_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_identities","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<bool>("ExpertExcept")
                        .HasColumnName("expert_except")
                        .HasColumnType("boolean");

                    b.Property<string>("FilePath")
                        .HasColumnName("screen_link")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectStatus")
                        .HasColumnName("project_status")
                        .HasColumnType("integer");

                    b.Property<int>("ReestrProjectId")
                        .HasColumnName("reestr_project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("reestr_project_position","reestrprojects");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.BasedDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AcceptedOrg")
                        .HasColumnName("accepted_org")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnName("document_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentName")
                        .HasColumnName("document_name")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNo")
                        .HasColumnName("document_no")
                        .HasColumnType("text");

                    b.Property<int>("DocumentType")
                        .HasColumnName("document_type")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("based_documents","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.EmployeeStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CentralManagementEmployees")
                        .HasColumnName("central_management_employees")
                        .HasColumnType("integer");

                    b.Property<int>("CentralManagementPositions")
                        .HasColumnName("central_management_positions")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentHeadEmployees")
                        .HasColumnName("department_head_employees")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentHeadPositions")
                        .HasColumnName("department_head_positions")
                        .HasColumnType("integer");

                    b.Property<int>("HeadEmployees")
                        .HasColumnName("head_employees")
                        .HasColumnType("integer");

                    b.Property<int>("HeadPositions")
                        .HasColumnName("head_positions")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("OtherEmployees")
                        .HasColumnName("other_employees")
                        .HasColumnType("integer");

                    b.Property<int>("OtherPositions")
                        .HasColumnName("other_positions")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionPersonnelsEmployee")
                        .HasColumnName("production_personnels_employee")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionPersonnelsPosition")
                        .HasColumnName("production_personnels_position")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceStuffEmployee")
                        .HasColumnName("service_stuff_employee")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceStuffPositions")
                        .HasColumnName("service_stuff_positions")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialistsEmployee")
                        .HasColumnName("specialists_employee")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialistsPosition")
                        .HasColumnName("specialists_position")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinationEmployees")
                        .HasColumnName("subordination_employees")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinationPositions")
                        .HasColumnName("subordination_positions")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalStuffEmployee")
                        .HasColumnName("technical_stuff_employee")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalStuffPositions")
                        .HasColumnName("technical_stuff_positions")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialManagementEmployees")
                        .HasColumnName("territorial_management_employees")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialManagementPositions")
                        .HasColumnName("territorial_management_positions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("employee_statistics","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.OrganizationDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnName("document_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentName")
                        .HasColumnName("document_name")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNo")
                        .HasColumnName("document_no")
                        .HasColumnType("text");

                    b.Property<int>("DocumentType")
                        .HasColumnName("document_type")
                        .HasColumnType("integer");

                    b.Property<string>("MainPurpose")
                        .HasColumnName("main_purpose")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_documents","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.Organizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressDistrict")
                        .HasColumnName("address_district")
                        .HasColumnType("text");

                    b.Property<string>("AddressHomeNo")
                        .HasColumnName("address_home_no")
                        .HasColumnType("text");

                    b.Property<string>("AddressProvince")
                        .HasColumnName("address_province")
                        .HasColumnType("text");

                    b.Property<string>("AddressStreet")
                        .HasColumnName("address_street")
                        .HasColumnType("text");

                    b.Property<int>("CyberSecurityId")
                        .HasColumnName("cyber_security_id")
                        .HasColumnType("integer");

                    b.Property<string>("Department")
                        .HasColumnName("department")
                        .HasColumnType("text");

                    b.Property<string>("DirectorFirstName")
                        .HasColumnName("director_first_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorLastName")
                        .HasColumnName("director_last_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorMail")
                        .HasColumnName("director_mail")
                        .HasColumnType("text");

                    b.Property<string>("DirectorMidName")
                        .HasColumnName("director_mid_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorPosition")
                        .HasColumnName("director_position")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<string>("FullNameRu")
                        .HasColumnName("full_name_ru")
                        .HasColumnType("text");

                    b.Property<bool>("HasOrgDocuments")
                        .HasColumnName("has_org_documents")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsIct")
                        .HasColumnName("is_ict")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMonitoring")
                        .HasColumnName("is_monitoring")
                        .HasColumnType("boolean");

                    b.Property<int>("MyGovId")
                        .HasColumnName("my_gov_id")
                        .HasColumnType("integer");

                    b.Property<int>("OrgCategory")
                        .HasColumnName("org_category")
                        .HasColumnType("integer");

                    b.Property<string>("OrgInn")
                        .HasColumnName("org_inn")
                        .HasColumnType("text");

                    b.Property<string>("OrgMail")
                        .HasColumnName("org_mail")
                        .HasColumnType("text");

                    b.Property<int>("OrgType")
                        .HasColumnName("org_type")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<string>("PostIndex")
                        .HasColumnName("post_index")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("text");

                    b.Property<string>("ShortNameRu")
                        .HasColumnName("short_name_ru")
                        .HasColumnType("text");

                    b.Property<int>("UserServiceId")
                        .HasColumnName("user_service_id")
                        .HasColumnType("integer");

                    b.Property<string>("WebSite")
                        .HasColumnName("web_site")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("organization","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("regions","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.ReplacerOrgHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnName("mail")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<string>("MidName")
                        .HasColumnName("mid_name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .HasColumnName("photo_path")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("replacer_org_head","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.SiteFailComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DeadlineId")
                        .HasColumnName("deadline_id")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("ScreenPath")
                        .HasColumnName("screen_path")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("site_fail_comment","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.SiteFailsTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DeadlineId")
                        .HasColumnName("deadline_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FailedTime")
                        .HasColumnName("failed_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("site_fails_table","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.SubOrgStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CentralManagements")
                        .HasColumnName("central_managements")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Others")
                        .HasColumnName("others")
                        .HasColumnType("integer");

                    b.Property<int>("Subordinations")
                        .HasColumnName("subordinations")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialManagements")
                        .HasColumnName("territorial_managements")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("sub_org_statistics","organizations");
                });

            modelBuilder.Entity("Domain.Models.FirstSection.SubOrganizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Contacts")
                        .HasColumnName("contacts")
                        .HasColumnType("text");

                    b.Property<string>("DirectorFirstName")
                        .HasColumnName("director_first_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorLastName")
                        .HasColumnName("director_last_name")
                        .HasColumnType("text");

                    b.Property<string>("DirectorMidName")
                        .HasColumnName("director_mid_name")
                        .HasColumnType("text");

                    b.Property<string>("Inn")
                        .HasColumnName("inn")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("OfficialSite")
                        .HasColumnName("official_site")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerType")
                        .HasColumnName("owner_type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("sub_organization","organizations");
                });

            modelBuilder.Entity("Domain.Models.GRankTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDAte")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ElementId")
                        .HasColumnName("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("ExpertId")
                        .HasColumnName("expert_id")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertPinfl")
                        .HasColumnName("espert_pinfl")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsException")
                        .HasColumnName("is_exception")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<double>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("double precision");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubFieldId")
                        .HasColumnName("sub_field_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SphereId");

                    b.ToTable("g_rank_table","ranking");
                });

            modelBuilder.Entity("Domain.Models.GSphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("g_sphere","ranking");
                });

            modelBuilder.Entity("Domain.Models.MibModels.MibReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiDescription")
                        .HasColumnName("api_description")
                        .HasColumnType("text");

                    b.Property<string>("ApiName")
                        .HasColumnName("api_name")
                        .HasColumnType("text");

                    b.Property<string>("ApiVersion")
                        .HasColumnName("api_version")
                        .HasColumnType("text");

                    b.Property<int>("FailCount")
                        .HasColumnName("fail_count")
                        .HasColumnType("integer");

                    b.Property<int>("Overall")
                        .HasColumnName("overall")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerInn")
                        .HasColumnName("owner_inn")
                        .HasColumnType("text");

                    b.Property<int>("SuccessCount")
                        .HasColumnName("success_count")
                        .HasColumnType("integer");

                    b.Property<double>("SuccessShare")
                        .HasColumnName("success_share")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("mib_report","organizations");
                });

            modelBuilder.Entity("Domain.Models.Organization.MygovReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllRequests")
                        .HasColumnName("all_requests")
                        .HasColumnType("integer");

                    b.Property<int>("LateRequests")
                        .HasColumnName("late_requests")
                        .HasColumnType("integer");

                    b.Property<int>("MygovMainOrgId")
                        .HasColumnName("mygov_main_org_id")
                        .HasColumnType("integer");

                    b.Property<int>("MygovOrgId")
                        .HasColumnName("mygov_org_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Part")
                        .HasColumnName("part")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .HasColumnName("service_name")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("mygov_reports","organizations");
                });

            modelBuilder.Entity("Domain.Models.Organization.MygovReportsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DeadlineFrom")
                        .HasColumnName("deadline_from")
                        .HasColumnType("text");

                    b.Property<string>("DeadlineTo")
                        .HasColumnName("deadline_to")
                        .HasColumnType("text");

                    b.Property<int>("MygovOrgId")
                        .HasColumnName("mygov_org_id")
                        .HasColumnType("integer");

                    b.Property<int>("Part")
                        .HasColumnName("part")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .HasColumnName("service_name")
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnName("task_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("mygov_reports_detail","organizations");
                });

            modelBuilder.Entity("Domain.Models.OrganizationApps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AndroidAppLink")
                        .HasColumnName("android_app_link")
                        .HasColumnType("text");

                    b.Property<bool>("HasAndroidApp")
                        .HasColumnName("has_android_app")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasIosApp")
                        .HasColumnName("has_ios_app")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOtherApps")
                        .HasColumnName("has_other_apps")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasResponsiveWebsite")
                        .HasColumnName("has_responsive_website")
                        .HasColumnType("boolean");

                    b.Property<string>("IosAppLink")
                        .HasColumnName("ios_app_link")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("OtherAppLink")
                        .HasColumnName("other_app_link")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_apps","organizations");
                });

            modelBuilder.Entity("Domain.Models.Ranking.Administrations.AField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SphereId");

                    b.ToTable("a_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.Administrations.ARankTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDAte")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ElementId")
                        .HasColumnName("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("ExpertId")
                        .HasColumnName("expert_id")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertPinfl")
                        .HasColumnName("espert_pinfl")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsException")
                        .HasColumnName("is_exception")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<double>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("double precision");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubFieldId")
                        .HasColumnName("sub_field_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SphereId");

                    b.ToTable("a_rank_table","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.Administrations.ASphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("a_sphere","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.Administrations.ASubField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("a_sub_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.ExceptionFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDAte")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpertId")
                        .HasColumnName("expert_id")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertPinfl")
                        .HasColumnName("espert_pinfl")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("exception_fields","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.GField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SphereId");

                    b.ToTable("g_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.GSubField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("g_sub_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.XField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SphereId");

                    b.ToTable("x_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.Ranking.XSubField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("x_sub_field","ranking");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.HelplineInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Comment10")
                        .HasColumnName("Comment10")
                        .HasColumnType("text");

                    b.Property<string>("Comment11")
                        .HasColumnName("Comment11")
                        .HasColumnType("text");

                    b.Property<string>("Comment12")
                        .HasColumnName("Comment12")
                        .HasColumnType("text");

                    b.Property<string>("Comment13")
                        .HasColumnName("Comment13")
                        .HasColumnType("text");

                    b.Property<string>("Comment14")
                        .HasColumnName("Comment14")
                        .HasColumnType("text");

                    b.Property<string>("Comment2")
                        .HasColumnName("Comment2")
                        .HasColumnType("text");

                    b.Property<string>("Comment3")
                        .HasColumnName("Comment3")
                        .HasColumnType("text");

                    b.Property<string>("Comment4")
                        .HasColumnName("Comment4")
                        .HasColumnType("text");

                    b.Property<string>("Comment5")
                        .HasColumnName("Comment5")
                        .HasColumnType("text");

                    b.Property<string>("Comment6")
                        .HasColumnName("Comment6")
                        .HasColumnType("text");

                    b.Property<string>("Comment7")
                        .HasColumnName("Comment7")
                        .HasColumnType("text");

                    b.Property<string>("Comment8")
                        .HasColumnName("Comment8")
                        .HasColumnType("text");

                    b.Property<string>("Comment9")
                        .HasColumnName("Comment9")
                        .HasColumnType("text");

                    b.Property<bool?>("HelplinePhoneRatingOption")
                        .HasColumnName("helpline_phone_rating_option")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplinePhoneWorkStatus")
                        .HasColumnName("helpline_phone_work_status")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplineStatisticsArchiving")
                        .HasColumnName("helpline_statistics_archiving")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplineStatisticsByRank")
                        .HasColumnName("helpline_statistics_by_rank")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplineStatisticsByTime")
                        .HasColumnName("helpline_statistics_by_time")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HelplineStatisticsIntime")
                        .HasColumnName("helpline_statistics_intime")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("RegulationShowsClientRights")
                        .HasColumnName("regulation_shows_client_rights")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsPhone")
                        .HasColumnName("regulation_shows_phone")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsReplayDeadline")
                        .HasColumnName("regulation_shows_replay_deadline")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsRequestProcedure")
                        .HasColumnName("regulation_shows_request_procedure")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsServices")
                        .HasColumnName("regulation_shows_services")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationShowsTimetable")
                        .HasColumnName("regulation_shows_timetable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RegulationVerified")
                        .HasColumnName("regulation_verified")
                        .HasColumnType("boolean");

                    b.Property<string>("Screenshot10Link")
                        .HasColumnName("screenshot10_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot11Link")
                        .HasColumnName("screenshot11_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot12Link")
                        .HasColumnName("screenshot12_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot13Link")
                        .HasColumnName("screenshot13_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot14Link")
                        .HasColumnName("screenshot14_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot2Link")
                        .HasColumnName("screenshot2_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot3Link")
                        .HasColumnName("screenshot3_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot4Link")
                        .HasColumnName("screenshot4_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot5Link")
                        .HasColumnName("screenshot5_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot6Link")
                        .HasColumnName("screenshot6_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot7Link")
                        .HasColumnName("screenshot7_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot8Link")
                        .HasColumnName("screenshot8_link")
                        .HasColumnType("text");

                    b.Property<string>("Screenshot9Link")
                        .HasColumnName("screenshot9_link")
                        .HasColumnType("text");

                    b.Property<string>("ScreenshotLink")
                        .HasColumnName("screenshot_link")
                        .HasColumnType("text");

                    b.Property<bool?>("WebsiteHasHelplineStatistics")
                        .HasColumnName("website_has_helpline_statistics")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("helpline_info","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrgDataFiller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Contacts")
                        .HasColumnName("contacts")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_data_filler","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrgHelpline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("HelplineNumber")
                        .HasColumnName("helpline_number")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("org_helpline","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrganizationSocials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CommentToSocialSite")
                        .HasColumnName("comment_to_social_site")
                        .HasColumnType("text");

                    b.Property<bool>("IsMain")
                        .HasColumnName("is_main")
                        .HasColumnType("boolean");

                    b.Property<string>("Link1")
                        .HasColumnName("link1")
                        .HasColumnType("text");

                    b.Property<string>("Link2")
                        .HasColumnName("link2")
                        .HasColumnType("text");

                    b.Property<string>("Link3")
                        .HasColumnName("link3")
                        .HasColumnType("text");

                    b.Property<string>("Link4")
                        .HasColumnName("link4")
                        .HasColumnType("text");

                    b.Property<string>("Link5")
                        .HasColumnName("link5")
                        .HasColumnType("text");

                    b.Property<bool?>("LinksToOtherSocials")
                        .HasColumnName("links_to_other_socials")
                        .HasColumnType("boolean");

                    b.Property<string>("MessengerLink")
                        .HasColumnName("messenger_link")
                        .HasColumnType("text");

                    b.Property<bool?>("OrgEmail")
                        .HasColumnName("org_email")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgFullName")
                        .HasColumnName("org_full_name")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgLegalAddress")
                        .HasColumnName("org_legal_address")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgLegalSite")
                        .HasColumnName("org_legal_site")
                        .HasColumnType("boolean");

                    b.Property<bool?>("OrgPhone")
                        .HasColumnName("org_phone")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("Pool")
                        .HasColumnName("pool")
                        .HasColumnType("boolean");

                    b.Property<string>("PoolComment")
                        .HasColumnName("pool_comment")
                        .HasColumnType("text");

                    b.Property<string>("PoolLink")
                        .HasColumnName("pool_link")
                        .HasColumnType("text");

                    b.Property<string>("PoolScreenshotLink")
                        .HasColumnName("pool_screenshot_link")
                        .HasColumnType("text");

                    b.Property<bool>("Post1")
                        .HasColumnName("post1")
                        .HasColumnType("boolean");

                    b.Property<string>("Post1Link")
                        .HasColumnName("post1_link")
                        .HasColumnType("text");

                    b.Property<bool>("Post2")
                        .HasColumnName("post2")
                        .HasColumnType("boolean");

                    b.Property<string>("Post2Link")
                        .HasColumnName("post2_link")
                        .HasColumnType("text");

                    b.Property<bool>("Post3")
                        .HasColumnName("post3")
                        .HasColumnType("boolean");

                    b.Property<string>("Post3Link")
                        .HasColumnName("post3_link")
                        .HasColumnType("text");

                    b.Property<bool>("Post4")
                        .HasColumnName("post4")
                        .HasColumnType("boolean");

                    b.Property<string>("Post4Link")
                        .HasColumnName("post4_link")
                        .HasColumnType("text");

                    b.Property<bool>("Post5")
                        .HasColumnName("post5")
                        .HasColumnType("boolean");

                    b.Property<string>("Post5Link")
                        .HasColumnName("post5_link")
                        .HasColumnType("text");

                    b.Property<bool?>("SyncronizedPosts")
                        .HasColumnName("syncronized_posts")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Verified")
                        .HasColumnName("verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_socials","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.SiteRequirementsSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementStatus")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("ScreenLink1")
                        .HasColumnName("screen_link_1")
                        .HasColumnType("text");

                    b.Property<string>("ScreenLink2")
                        .HasColumnName("screen_link_2")
                        .HasColumnType("text");

                    b.Property<string>("ScreenLink3")
                        .HasColumnName("screen_link_3")
                        .HasColumnType("text");

                    b.Property<string>("SiteLink1")
                        .HasColumnName("site_link_1")
                        .HasColumnType("text");

                    b.Property<string>("SiteLink2")
                        .HasColumnName("site_link_2")
                        .HasColumnType("text");

                    b.Property<string>("SiteLink3")
                        .HasColumnName("site_link_3")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("site_requirements_sample","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.WebSiteAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DeadlineId")
                        .HasColumnName("deadline_id")
                        .HasColumnType("integer");

                    b.Property<int>("FailedPing")
                        .HasColumnName("failed_ping")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("SuccessfulPing")
                        .HasColumnName("successful_ping")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("WebSiteAvailability","organizations");
                });

            modelBuilder.Entity("Domain.Models.SecondSection.WebSiteRequirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("RequirementStatus")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("ScreenLink1")
                        .HasColumnName("screen_link_1")
                        .HasColumnType("text");

                    b.Property<string>("ScreenLink2")
                        .HasColumnName("screen_link_2")
                        .HasColumnType("text");

                    b.Property<string>("ScreenLink3")
                        .HasColumnName("screen_link_3")
                        .HasColumnType("text");

                    b.Property<string>("SiteLink1")
                        .HasColumnName("site_link_1")
                        .HasColumnType("text");

                    b.Property<string>("SiteLink2")
                        .HasColumnName("site_link_2")
                        .HasColumnType("text");

                    b.Property<string>("SiteLink3")
                        .HasColumnName("site_link_3")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("website_requirements","organizations");
                });

            modelBuilder.Entity("Domain.Models.SeventhSection.OrganizationComputers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllComputers")
                        .HasColumnName("all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("CentralAllComputers")
                        .HasColumnName("central_all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedCorporateNetwork")
                        .HasColumnName("central_connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedEijro")
                        .HasColumnName("central_connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedExat")
                        .HasColumnName("central_connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedLocalSet")
                        .HasColumnName("central_connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedNetwork")
                        .HasColumnName("central_connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedProjectAppeal")
                        .HasColumnName("central_connected_project_appeal")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedProjectGov")
                        .HasColumnName("central_connected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedProjectMyWork")
                        .HasColumnName("central_connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("CentralConnectedProjectResolution")
                        .HasColumnName("central_connected_project_resolution")
                        .HasColumnType("integer");

                    b.Property<int>("CentralWorkingComputers")
                        .HasColumnName("central_working_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedCorporateNetwork")
                        .HasColumnName("connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedEijro")
                        .HasColumnName("connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedExat")
                        .HasColumnName("connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedLocalSet")
                        .HasColumnName("connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedNetwork")
                        .HasColumnName("connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedProjectAppeal")
                        .HasColumnName("connected_project_appeal")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedProjectGov")
                        .HasColumnName("connected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedProjectMyWork")
                        .HasColumnName("connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("ConnectedProjectResolution")
                        .HasColumnName("connected_project_resolution")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsAllComputers")
                        .HasColumnName("devicions_all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedCorporateNetwork")
                        .HasColumnName("devicions_connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedEijro")
                        .HasColumnName("devicions_connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedExat")
                        .HasColumnName("devicions_connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedLocalSet")
                        .HasColumnName("devicions_connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedNetwork")
                        .HasColumnName("devicions_connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedProjectAppeal")
                        .HasColumnName("devicions_connected_project_appeal")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedProjectGov")
                        .HasColumnName("devicions_connected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedProjectMyWork")
                        .HasColumnName("devicions_connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsConnectedProjectResolution")
                        .HasColumnName("devicions_connected_project_resolution")
                        .HasColumnType("integer");

                    b.Property<int>("DevicionsWorkingComputers")
                        .HasColumnName("devicions_working_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateAllComputers")
                        .HasColumnName("subordinate_all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedCorporateNetwork")
                        .HasColumnName("subordinate_connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedEijro")
                        .HasColumnName("subordinate_connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedExat")
                        .HasColumnName("subordinate_connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedLocalSet")
                        .HasColumnName("subordinate_connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedNetwork")
                        .HasColumnName("subordinate_connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedProjectAppeal")
                        .HasColumnName("subordinate_connected_project_appeal")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedProjectGov")
                        .HasColumnName("subordinateconnected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedProjectMyWork")
                        .HasColumnName("subordinate_connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateConnectedProjectResolution")
                        .HasColumnName("subordinate_connected_project_resolution")
                        .HasColumnType("integer");

                    b.Property<int>("SubordinateWorkingComputers")
                        .HasColumnName("subordinate_working_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialAllComputers")
                        .HasColumnName("territorial_all_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedCorporateNetwork")
                        .HasColumnName("territorial_connected_corporate_network")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedEijro")
                        .HasColumnName("territorial_connected_eijro")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedExat")
                        .HasColumnName("territorial_connected_exat")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedLocalSet")
                        .HasColumnName("territorial_connected_local_set")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedNetwork")
                        .HasColumnName("territorial_connected_network")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedProjectAppeal")
                        .HasColumnName("territorial_connected_project_appeal")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedProjectGov")
                        .HasColumnName("territorial_connected_project_gov")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedProjectMyWork")
                        .HasColumnName("territorial_connected_project_my_work")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialConnectedProjectResolution")
                        .HasColumnName("territorial_connected_project_resolution")
                        .HasColumnType("integer");

                    b.Property<int>("TerritorialWorkingComputers")
                        .HasColumnName("territorial_working_cmputers")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingComputers")
                        .HasColumnName("working_cmputers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_computers","organizations");
                });

            modelBuilder.Entity("Domain.Models.SeventhSection.OrganizationServers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NumberOfServers")
                        .HasColumnName("number_of_servers")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("ServerAutomaticTasks")
                        .HasColumnName("server_automatic_tasks")
                        .HasColumnType("text");

                    b.Property<string>("ServerBrand")
                        .HasColumnName("server_brand")
                        .HasColumnType("text");

                    b.Property<string>("ServerConfig")
                        .HasColumnName("server_config")
                        .HasColumnType("text");

                    b.Property<string>("ServerLocation")
                        .HasColumnName("server_location")
                        .HasColumnType("text");

                    b.Property<string>("ServerType")
                        .HasColumnName("server_type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_servers","organizations");
                });

            modelBuilder.Entity("Domain.Models.SixthSection.IndicatorRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllIndicators")
                        .HasColumnName("all_indicators")
                        .HasColumnType("integer");

                    b.Property<int>("CompleteIndicators")
                        .HasColumnName("complete_indicators")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("indicator_rating","organizations");
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationDataAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("DataAvailability")
                        .HasColumnName("data_availiability")
                        .HasColumnType("boolean");

                    b.Property<double>("DataAvailabilityRate")
                        .HasColumnName("data_availiability_rate")
                        .HasColumnType("double precision");

                    b.Property<bool>("DataRelevance")
                        .HasColumnName("data_relevance")
                        .HasColumnType("boolean");

                    b.Property<double>("DataRelevanceRate")
                        .HasColumnName("data_relevance_rate")
                        .HasColumnType("double precision");

                    b.Property<int>("DeadlineId")
                        .HasColumnName("deadline_id")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<string>("ExpertPinfl")
                        .HasColumnName("expert_pinfl")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.Property<DateTime>("SetDate")
                        .HasColumnName("set_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Sphere")
                        .HasColumnName("sphere")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeadlineId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_data_availability","organizations");
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationDigitalEconomyProjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BasisFilePath")
                        .HasColumnName("basis_file_path")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .HasColumnName("project_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_digital_economy_projects","organizations");
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationDigitalEconomyProjectsReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompletedProjects")
                        .HasColumnName("completed_projects")
                        .HasColumnType("integer");

                    b.Property<int>("NotFinishedProjects")
                        .HasColumnName("not_finished_projects")
                        .HasColumnType("integer");

                    b.Property<int>("OngoingProjects")
                        .HasColumnName("ongoing_plojects")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectsCount")
                        .HasColumnName("projects_count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_digital_economy_projects_report","organizations");
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationIctSpecialForces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AmountOfFunds")
                        .HasColumnName("amount_of_funds")
                        .HasColumnType("double precision");

                    b.Property<double>("AmountOfSpentFund")
                        .HasColumnName("amount_of_spent_fund")
                        .HasColumnType("double precision");

                    b.Property<int>("CentralofficeEmployees")
                        .HasColumnName("central_office_employees")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterizingDocument")
                        .HasColumnName("characterizing_document")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<bool>("EmployeesResumesSentMinistry")
                        .HasColumnName("employees_resumes_sent_ministry")
                        .HasColumnType("boolean");

                    b.Property<string>("EmployeesSertificates")
                        .HasColumnName("employees_sertificates")
                        .HasColumnType("text");

                    b.Property<int>("EmployeesSum")
                        .HasColumnName("employees_sum")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<bool>("ExpertExept")
                        .HasColumnName("expert_except")
                        .HasColumnType("boolean");

                    b.Property<bool>("FinanceProvisionMaterial")
                        .HasColumnName("finance_provision_material")
                        .HasColumnType("boolean");

                    b.Property<string>("FinanceProvisionMaterialDocument")
                        .HasColumnName("finance_provision_material_document")
                        .HasColumnType("text");

                    b.Property<string>("FormOfSpecialForces")
                        .HasColumnName("form_of_special_forces")
                        .HasColumnType("text");

                    b.Property<string>("FullNameDirector")
                        .HasColumnName("full_name_head")
                        .HasColumnType("text");

                    b.Property<double>("FundForKeepingForces")
                        .HasColumnName("fund_for_keeping_forces")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasCharacterizingDocument")
                        .HasColumnName("has_characterizing_document")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMinistryAgreedCharacterizingDocument")
                        .HasColumnName("has_ministry_agreed_characterizing_document")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSpecialForces")
                        .HasColumnName("has_special_forces")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasWorkPlanOfSpecialForces")
                        .HasColumnName("has_work_plan_of_special_forces")
                        .HasColumnType("boolean");

                    b.Property<string>("HeadPosition")
                        .HasColumnName("head_position")
                        .HasColumnType("text");

                    b.Property<int>("InformationSecurityEmployees")
                        .HasColumnName("information_security_employees")
                        .HasColumnType("integer");

                    b.Property<int>("InformationSystemDatabaseEmployees")
                        .HasColumnName("information_system_database_employees")
                        .HasColumnType("integer");

                    b.Property<double>("LastYearAmountOfFunds")
                        .HasColumnName("last_year_amount_of_funds")
                        .HasColumnType("double precision");

                    b.Property<string>("MinistryAgreedCharacterizingDocument")
                        .HasColumnName("ministry_agreed_characterizing_document")
                        .HasColumnType("text");

                    b.Property<bool>("MinistryAgreedHead")
                        .HasColumnName("ministry_agreed_head")
                        .HasColumnType("boolean");

                    b.Property<string>("MinistryAgreedHeadDocument")
                        .HasColumnName("ministry_agreed_head_document")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobile_phone")
                        .HasColumnType("text");

                    b.Property<double>("NextYearFundForKeepingForces")
                        .HasColumnName("next_year_fund_for_keeping_forces")
                        .HasColumnType("double precision");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizationalStructureFile")
                        .HasColumnName("organizational_structure_file")
                        .HasColumnType("text");

                    b.Property<string>("OutsourcingCompanySertificate")
                        .HasColumnName("outsourcing_company_sertificate")
                        .HasColumnType("text");

                    b.Property<int>("OutsourcingEmployees")
                        .HasColumnName("outsourcing_employees")
                        .HasColumnType("integer");

                    b.Property<bool>("OutsourcingHasCertificates")
                        .HasColumnName("outsourcing_has_certificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("OutsourcingHasWorkPlan")
                        .HasColumnName("outsourcing_has_work_plan")
                        .HasColumnType("boolean");

                    b.Property<double>("OutsourcingSpentFund")
                        .HasColumnName("outsourcing_spent_fund")
                        .HasColumnType("double precision");

                    b.Property<string>("OutsourcingWorkPlanFile")
                        .HasColumnName("outsourcing_work_plan_file")
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .HasColumnName("photo_path")
                        .HasColumnType("text");

                    b.Property<bool>("QuarterlyReportOutsourcing")
                        .HasColumnName("quarterly_report_outsourcing")
                        .HasColumnType("boolean");

                    b.Property<string>("QuarterlyReportOutsourcingFile")
                        .HasColumnName("quarterly_report_outsourcing_file")
                        .HasColumnType("text");

                    b.Property<int>("RegionalEmployees")
                        .HasColumnName("regional_employees")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialForcesName")
                        .HasColumnName("special_forces_name")
                        .HasColumnType("text");

                    b.Property<string>("SpecialistsStuffingDocument")
                        .HasColumnName("specialists_stuffing_document")
                        .HasColumnType("text");

                    b.Property<int>("SubordinateEmployees")
                        .HasColumnName("subordinate_employees")
                        .HasColumnType("integer");

                    b.Property<string>("WorkPhone")
                        .HasColumnName("work_phone")
                        .HasColumnType("text");

                    b.Property<string>("WorkPlanOfSpecialForces")
                        .HasColumnName("work_plan_of_special_forces")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_ict_special_forces","organizations");
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationIndicators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FileUploadDate")
                        .HasColumnName("file_upload_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IndicatorFilePath")
                        .HasColumnName("indicator_file_path")
                        .HasColumnType("text");

                    b.Property<string>("IndicatorReportPath")
                        .HasColumnName("indicator_report_path")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_indicators","organizations");
                });

            modelBuilder.Entity("Domain.Models.ThirdSection.OrganizationPublicServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppLink")
                        .HasColumnName("app_link")
                        .HasColumnType("text");

                    b.Property<string>("AppName")
                        .HasColumnName("app_name")
                        .HasColumnType("text");

                    b.Property<string>("AppScreenshot")
                        .HasColumnName("app_screenshot")
                        .HasColumnType("text");

                    b.Property<string>("MyGovLink")
                        .HasColumnName("mygov_link")
                        .HasColumnType("text");

                    b.Property<string>("MyGovScreenshotLink")
                        .HasColumnName("mygov_screenshot_link")
                        .HasColumnType("text");

                    b.Property<bool>("MyGovService")
                        .HasColumnName("mygov_service")
                        .HasColumnType("boolean");

                    b.Property<bool>("MyGovServiceExpert")
                        .HasColumnName("mygov_service_expert")
                        .HasColumnType("boolean");

                    b.Property<string>("MyGovServiceExpertComment")
                        .HasColumnName("mygov_service_expert_commetn")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<bool>("OtherApps")
                        .HasColumnName("other_apps")
                        .HasColumnType("boolean");

                    b.Property<bool>("OtherAppsExpert")
                        .HasColumnName("other_apps_expert")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherAppsExpertComment")
                        .HasColumnName("other_apps_expert_commetn")
                        .HasColumnType("text");

                    b.Property<int>("PaidFor")
                        .HasColumnName("paid_for")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ServiceBasedDocumentDate")
                        .HasColumnName("service_based_document_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ServiceBasedDocumentName")
                        .HasColumnName("service_based_document_name")
                        .HasColumnType("text");

                    b.Property<string>("ServiceBasedDocumentNumber")
                        .HasColumnName("service_based_document_number")
                        .HasColumnType("text");

                    b.Property<int>("ServiceBasedDocumentType")
                        .HasColumnName("service_based_document_type")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceCompletePeriod")
                        .HasColumnName("service_complete_period")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceCompletePeriodType")
                        .HasColumnName("service_complete_period_type")
                        .HasColumnType("integer");

                    b.Property<bool>("ServiceHasReglament")
                        .HasColumnName("service_has_reglament")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServiceHasReglamentExpert")
                        .HasColumnName("service_has_reglament_expert")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceHasReglamentExpertComment")
                        .HasColumnName("service_has_reglament_expert_comment")
                        .HasColumnType("text");

                    b.Property<bool>("ServiceHasUpdateReglament")
                        .HasColumnName("service_has_update_reglament")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServiceHasUpdateReglamentExpert")
                        .HasColumnName("service_has_update_reglament_expert")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceHasUpdateReglamentExpertComment")
                        .HasColumnName("service_has_update_reglament_expert_comment")
                        .HasColumnType("text");

                    b.Property<string>("ServiceLink")
                        .HasColumnName("service_link")
                        .HasColumnType("text");

                    b.Property<string>("ServiceNameRu")
                        .HasColumnName("service_name_ru")
                        .HasColumnType("text");

                    b.Property<string>("ServiceNameUz")
                        .HasColumnName("service_name_uz")
                        .HasColumnType("text");

                    b.Property<double>("ServicePrice")
                        .HasColumnName("service_price")
                        .HasColumnType("double precision");

                    b.Property<string>("ServicePriceComment")
                        .HasColumnName("service_price_comment")
                        .HasColumnType("text");

                    b.Property<string>("ServiceReglamentComment")
                        .HasColumnName("service_reglament_comment")
                        .HasColumnType("text");

                    b.Property<string>("ServiceReglamentPath")
                        .HasColumnName("service_reglament_path")
                        .HasColumnType("text");

                    b.Property<string>("ServiceScreenshotLink")
                        .HasColumnName("service_screenshot_link")
                        .HasColumnType("text");

                    b.Property<int>("ServiceSubjects")
                        .HasColumnName("service_subject")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceType")
                        .HasColumnName("service_type")
                        .HasColumnType("integer");

                    b.Property<bool>("ServiceTypeExpert")
                        .HasColumnName("service_type_expert")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceTypeExpertComment")
                        .HasColumnName("service_type_expert_comment")
                        .HasColumnType("text");

                    b.Property<string>("ServiceUpdateReglamentComment")
                        .HasColumnName("service_update_reglament_comment")
                        .HasColumnType("text");

                    b.Property<string>("ServiceUpdateReglamentPath")
                        .HasColumnName("service_update_reglament_path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_public_services","organizations");
                });

            modelBuilder.Entity("Domain.Models.ThirdSection.OrganizationServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceNameRu")
                        .HasColumnName("service_name_ru")
                        .HasColumnType("text");

                    b.Property<string>("ServiceNameUz")
                        .HasColumnName("service_name_uz")
                        .HasColumnType("text");

                    b.Property<string>("ServiceUrl")
                        .HasColumnName("service_url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_services","organizations");
                });

            modelBuilder.Entity("Domain.Models.ThirdSection.OrganizationServicesRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationNumber")
                        .HasColumnName("application_number")
                        .HasColumnType("text");

                    b.Property<bool>("ApplicationProblemConfirmde")
                        .HasColumnName("application_problem_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ApplicationProblemText")
                        .HasColumnName("application_problem_text")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationProblemTextExspert")
                        .HasColumnName("application_problem_text_exspert")
                        .HasColumnType("text");

                    b.Property<string>("ConversationAudioLink")
                        .HasColumnName("conversation_audio_link")
                        .HasColumnType("text");

                    b.Property<string>("ExpertComment")
                        .HasColumnName("expert_comment")
                        .HasColumnType("text");

                    b.Property<bool>("HasApplicationProblem")
                        .HasColumnName("has_application_problem")
                        .HasColumnType("boolean");

                    b.Property<string>("NotRecommendationComment")
                        .HasColumnName("not_recommendation_comment")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RateSetDate")
                        .HasColumnName("rate_set_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("RecommendService")
                        .HasColumnName("recommend_service")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceComment")
                        .HasColumnName("service_comment")
                        .HasColumnType("text");

                    b.Property<bool>("ServiceCommentConfirmed")
                        .HasColumnName("service_comment_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceCommentConfirmedExspert")
                        .HasColumnName("service_comment_confirmed_exspert")
                        .HasColumnType("text");

                    b.Property<int>("ServiceCommentType")
                        .HasColumnName("service_comment_type")
                        .HasColumnType("integer");

                    b.Property<bool>("ServiceDissatisfactionConfirmed")
                        .HasColumnName("service_dissatisfaction_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceDissatisfactionConfirmedExspert")
                        .HasColumnName("service_dissatisfaction_confirmed_exspert")
                        .HasColumnType("text");

                    b.Property<string>("ServiceDissatisfactionReason")
                        .HasColumnName("service_dissatisfaction_reason")
                        .HasColumnType("text");

                    b.Property<int>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceRate")
                        .HasColumnName("service_rate")
                        .HasColumnType("integer");

                    b.Property<bool>("ServiceSatisfactive")
                        .HasColumnName("service_satisfactive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("organization_services_rate","organizations");
                });

            modelBuilder.Entity("Domain.Models.XRankTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDAte")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ElementId")
                        .HasColumnName("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("ExpertId")
                        .HasColumnName("expert_id")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertPinfl")
                        .HasColumnName("espert_pinfl")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsException")
                        .HasColumnName("is_exception")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quarter")
                        .HasColumnName("quarter")
                        .HasColumnType("integer");

                    b.Property<double>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("double precision");

                    b.Property<int>("SphereId")
                        .HasColumnName("sphere_id")
                        .HasColumnType("integer");

                    b.Property<int>("SubFieldId")
                        .HasColumnName("sub_field_id")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SphereId");

                    b.ToTable("x_rank_table","ranking");
                });

            modelBuilder.Entity("Domain.Models.XSphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("MaxRate")
                        .HasColumnName("max_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("x_sphere","ranking");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.Property<int>("NormativeLegalDocumentId")
                        .HasColumnName("normative_legal_document_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PerformanceYearEnd")
                        .HasColumnName("performance_year_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PerformanceYearStart")
                        .HasColumnName("performance_year_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormativeLegalDocumentId");

                    b.ToTable("application","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateComment")
                        .HasColumnName("date_comment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StageId")
                        .HasColumnName("stages_id")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .HasColumnName("user_role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("comment","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Cooworkers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("cooworkers","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.FileProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FileSaveDate")
                        .HasColumnName("file_save_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("file_project","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.FileStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FileSaveDate")
                        .HasColumnName("file_save_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.Property<int>("StageId")
                        .HasColumnName("stages_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("file_stage","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Financier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("financier","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.NormativeLegalDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnName("approved_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.Property<int>("NormativType")
                        .HasColumnName("document_type")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("normative_legal_document","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Performencer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("performencer","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("integer");

                    b.Property<string>("CostEffective")
                        .HasColumnName("cost_effective")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<double>("Payouts")
                        .HasColumnName("payouts")
                        .HasColumnType("double precision");

                    b.Property<string>("Problem")
                        .HasColumnName("problem")
                        .HasColumnType("text");

                    b.Property<string>("ProjectPurpose")
                        .HasColumnName("project_purpose")
                        .HasColumnType("text");

                    b.Property<double>("RaisedFunds")
                        .HasColumnName("raised_funds")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<double>("VolumeForecastFunds")
                        .HasColumnName("volume_forecast_funds")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("project","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.ProjectComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateComment")
                        .HasColumnName("date_comment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .HasColumnName("user_role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_comment","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.ProjectFinanciers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FinancierId")
                        .HasColumnName("financier_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FinancierId");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_financiers","module_regions");
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreationUserId")
                        .HasColumnName("creation_user_id")
                        .HasColumnType("integer");

                    b.Property<string>("CreationUserName")
                        .HasColumnName("creation_username")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameRu")
                        .HasColumnName("name_ru")
                        .HasColumnType("text");

                    b.Property<string>("NameUz")
                        .HasColumnName("name_uz")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int>("StageStatus")
                        .HasColumnName("stage_status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("stage","module_regions");
                });

            modelBuilder.Entity("Domain.Models.ContentManager", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.EighthSection.OrganizationBudget", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.EighthSection.OrganizationFinance", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.EighthSection.OrganizationFinanceReport", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.DelaysOnProjects", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgFinance", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgFutureYearsStrategies", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgInformationSystems", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrgProcesses", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.OrganizationEvents", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.AutomatedFunctions", b =>
                {
                    b.HasOne("Domain.Models.FifthSection.ReestrModels.ReestrProjectAutomatedServices", "ReestrProjectAutomatedServices")
                        .WithMany("AutomatedFunctions")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.AutomatedServices", b =>
                {
                    b.HasOne("Domain.Models.FifthSection.ReestrModels.ReestrProjectAutomatedServices", "ReestrProjectAutomatedServices")
                        .WithMany("AutomatedServices")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectAuthorizations", b =>
                {
                    b.HasOne("Domain.Models.FifthSection.ReestrModels.ReestrProjectAuthorizations", "ReestrProjectAuthorizations")
                        .WithMany("Authorizations")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectClassifications", b =>
                {
                    b.HasOne("Domain.Models.FifthSection.ReestrModels.ReestrProjectClassifications", "ReestrProjectClassifications")
                        .WithMany("Classifications")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectConnections", b =>
                {
                    b.HasOne("Domain.Models.FifthSection.ReestrModels.ReestrProjectConnection", "ReestrProjectConnection")
                        .WithMany("Connections")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectEfficiency", b =>
                {
                    b.HasOne("Domain.Models.FifthSection.ReestrModels.ReestrProjectEfficiency", "ReestrProjectEfficiency")
                        .WithMany("Efficiencies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ProjectIdentities", b =>
                {
                    b.HasOne("Domain.Models.FifthSection.ReestrModels.ReestrProjectIdentities", "ReestrProjectIdentities")
                        .WithMany("Identities")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectAuthorizations", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectAutomatedServices", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectClassifications", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectConnection", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectCyberSecurityExpertDecision", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectEfficiency", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectException", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectExpertDecision", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectIdentities", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FifthSection.ReestrModels.ReestrProjectPosition", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FirstSection.BasedDocuments", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany("BasedDocuments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FirstSection.EmployeeStatistics", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FirstSection.OrganizationDocuments", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FirstSection.ReplacerOrgHead", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FirstSection.SiteFailComments", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FirstSection.SiteFailsTable", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FirstSection.SubOrgStatistics", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FirstSection.SubOrganizations", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany("SubOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.GRankTable", b =>
                {
                    b.HasOne("Domain.Models.Ranking.GField", "GField")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.GSphere", "GSphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Organization.MygovReports", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.OrganizationApps", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.Administrations.AField", b =>
                {
                    b.HasOne("Domain.Models.Ranking.Administrations.ASphere", "ASphere")
                        .WithMany("AFields")
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.Administrations.ARankTable", b =>
                {
                    b.HasOne("Domain.Models.Ranking.Administrations.AField", "AField")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Ranking.Administrations.ASphere", "ASphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.Administrations.ASubField", b =>
                {
                    b.HasOne("Domain.Models.Ranking.Administrations.AField", "AField")
                        .WithMany("ASubFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.ExceptionFields", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.GField", b =>
                {
                    b.HasOne("Domain.Models.GSphere", "GSphere")
                        .WithMany("GFields")
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.GSubField", b =>
                {
                    b.HasOne("Domain.Models.Ranking.GField", "GField")
                        .WithMany("GSubFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.XField", b =>
                {
                    b.HasOne("Domain.Models.XSphere", "XSphere")
                        .WithMany("XFields")
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Ranking.XSubField", b =>
                {
                    b.HasOne("Domain.Models.Ranking.XField", "XField")
                        .WithMany("XSubFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.HelplineInfo", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrgDataFiller", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrgHelpline", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.OrganizationSocials", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.WebSiteAvailability", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SecondSection.WebSiteRequirements", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SeventhSection.OrganizationComputers", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SeventhSection.OrganizationServers", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SixthSection.IndicatorRating", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationDataAvailability", b =>
                {
                    b.HasOne("Domain.Models.Deadline", "Deadline")
                        .WithMany()
                        .HasForeignKey("DeadlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationDigitalEconomyProjects", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationDigitalEconomyProjectsReport", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationIctSpecialForces", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.SixthSection.OrganizationIndicators", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ThirdSection.OrganizationPublicServices", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ThirdSection.OrganizationServices", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ThirdSection.OrganizationServicesRate", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ThirdSection.OrganizationServices", "OrganizationServices")
                        .WithMany("Rates")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.XRankTable", b =>
                {
                    b.HasOne("Domain.Models.Ranking.XField", "XField")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.XSphere", "XSphere")
                        .WithMany()
                        .HasForeignKey("SphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Application", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.NormativeLegalDocument", "NormativeLegalDocument")
                        .WithMany("Applications")
                        .HasForeignKey("NormativeLegalDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Comment", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Stage", "Stage")
                        .WithMany("Comments")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Cooworkers", b =>
                {
                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MonitoringModels.Models.Project", "Project")
                        .WithMany("Cooworkers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.FileProject", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Project", "Project")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.FileStage", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Stage", "Stage")
                        .WithMany("Files")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Project", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Application", "Applications")
                        .WithMany("Projects")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.FirstSection.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.ProjectComment", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Project", "Project")
                        .WithMany("ProjectComments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.ProjectFinanciers", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Financier", "Financier")
                        .WithMany()
                        .HasForeignKey("FinancierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MonitoringModels.Models.Project", "Project")
                        .WithMany("ProjectFinanciers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MonitoringModels.Models.Stage", b =>
                {
                    b.HasOne("Domain.MonitoringModels.Models.Project", "Projects")
                        .WithMany("Stages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
